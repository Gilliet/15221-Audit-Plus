"""
Wrapper function that website can call & get formatted text schedules back

Argument (to file): a string "['class1', 'class2', ..., 'classN']" which the 
website will provide

Returns: Prints out a formatted schedule generated by problem.py
"""

import sys
import ast
import re
import problem



def interpretInput(incorrectMessage):
    '''Interprets the string of classes that the website has provided
    
    Arguments: the message to display when a class is formatted incorrectly

    Returns: a list of classes that problem.py can take in if everything's
    formatted nice, incorrectMessage otherwise
    '''
    # There are at least 2 elements, since you check for that in 
    # in generateSchedule before calling this function
    takenClassesString = sys.argv[1]
    
    takenClassesInit = ast.literal_eval(takenClassesString)
    takenClasses = []

    # Create regex to accept thing formatted as classes
    classRegex = re.compile('\d\d-\d\d\d')

    # takenClasses should be a list of strings of class numbers right now
    # Try to convert each class number into an int
    # Be mindful of leading 0's (we don't want octal notation)
    for classString in takenClassesInit:
        # Check if string is formatted as such
        if (type(classString) != str):
            return incorrectMessage
        # Check if class string is formatted as xx-xxx
        if (not classRegex.match(classString)):
            return incorrectMessage
        
        # If everything's okay, make it into a class number
        
        # Remove preceding 0
        if (classString[0] == '0'):
            classString = classString[1:] 
        # Remove dash
        classString = classString.replace("-", "")
        # Make into an int and add to takenClasses
        takenClasses.append(int(classString))


    # Temporary classes to get this working
    if (15112 not in takenClasses):
        takenClasses.append(15112)

    return takenClasses


def generateSchedule():
    '''Generates a schedule with taken classes as the initial state for a
    search by problem.py, then calls printSchedule which prints the output
    onto the command line

    Main function of websiteWrapper.py'''

    # Check for input length
    if (len(sys.argv) < 2):
        print "Usage: python websiteWrapper.py",
        print "'['class1', 'class2', ..., 'classN']'"
        return

    incorrectMessage = "Incorrectly formatted class string - should be in form xx-xxx"
    takenClasses = interpretInput(incorrectMessage)

    # Check that everything was formatted correctly
    if (takenClasses == incorrectMessage):
        print takenClasses
        return


    # Process of creating a schedule taken from problem.py
    pastSemesters = dict()
    pastSemesters[0] = takenClasses

    initialSchedule = problem.scheduleProblem((problem.CS, pastSemesters, 
                                              "fall"))

    # Search the problem to generate a schedule
    generatedSchedule = problem.depth_first_tree_search(initialSchedule).state[1]
    # get rid of the semester full of courses you've previously taken
    generatedSchedule.pop(0, None) 

    # Print it out so the website can print the schedule out
    printSchedule(generatedSchedule)

def printSchedule(generatedSchedule):
    '''Takes a schedule (list of semesters, where each semester is a list of
    classes) and prints it, formatted, onto the command line'''

    for j in range(len(generatedSchedule)):
        courseList = generatedSchedule[j+1]
        print "Semester: ", j+1, "<br>"
        for course in courseList:
            print course, ": " + problem.courseNums[course].name, "<br>"



generateSchedule()

